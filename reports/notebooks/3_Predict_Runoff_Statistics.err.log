Traceback (most recent call last):
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
random_results = {}
group_order = group_1
for tc in target_cols:    
    print(f'Processing randomization for target column: {tc}')
    test_results_fname = f'{tc}_prediction_results_shuffled.npy'
    test_results_fpath = os.path.join(results_folder, test_results_fname)
    
    if os.path.exists(test_results_fpath):

        shuffled_test_results = np.load(test_results_fpath, allow_pickle=True).item()
    else:
        shuffled_df = filtered_df.copy()
        for attr in all_attributes:
            # randomly shuffle the order of attribute values
            attr_values = filtered_df[attr].values
            np.random.shuffle(attr_values)
            shuffled_df[attr] = attr_values
        
        shuffled_test_results = predict_runoff_from_attributes(shuffled_df, tc, group_order, results_folder, n_boost_rounds, n_optimization_rounds, loss)
        np.save(test_results_fpath, shuffled_test_results)

    random_results[tc] = {'order': group_order, 'results': shuffled_test_results}
------------------

----- stdout -----
Processing randomization for target column: uar_mean
Processing randomization for target column: uar_std
Processing randomization for target column: uar_median
 Processing climate attribute set
------------------

[31m---------------------------------------------------------------------------[39m
[31mXGBoostError[39m                              Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[24][39m[32m, line 19[39m
[32m     16[39m         np.random.shuffle(attr_values)
[32m     17[39m         shuffled_df[attr] = attr_values
[32m---> [39m[32m19[39m     shuffled_test_results = [43mpredict_runoff_from_attributes[49m[43m([49m[43mshuffled_df[49m[43m,[49m[43m [49m[43mtc[49m[43m,[49m[43m [49m[43mgroup_order[49m[43m,[49m[43m [49m[43mresults_folder[49m[43m,[49m[43m [49m[43mn_boost_rounds[49m[43m,[49m[43m [49m[43mn_optimization_rounds[49m[43m,[49m[43m [49m[43mloss[49m[43m)[49m
[32m     20[39m     np.save(test_results_fpath, shuffled_test_results)
[32m     22[39m random_results[tc] = {[33m'[39m[33morder[39m[33m'[39m: group_order, [33m'[39m[33mresults[39m[33m'[39m: shuffled_test_results}

[36mCell[39m[36m [39m[32mIn[16][39m[32m, line 15[39m, in [36mpredict_runoff_from_attributes[39m[34m(df, target_column, group_order, results_folder, n_boost_rounds, n_optimization_rounds, loss)[39m
[32m     13[39m predictor_attributes += attribute_set_dict[set_name] 
[32m     14[39m input_data = df[[[33m'[39m[33mofficial_id[39m[33m'[39m] + predictor_attributes + [target_column]].copy()
[32m---> [39m[32m15[39m result_df, all_predictions_df, all_convergence_df = [43mrun_xgb_CV_trials[49m[43m([49m
[32m     16[39m [43m    [49m[43mset_name[49m[43m,[49m[43m [49m[43mpredictor_attributes[49m[43m,[49m[43m [49m[43mtarget_column[49m[43m,[49m[43m [49m[43minput_data[49m[43m,[49m[43m [49m
[32m     17[39m [43m    [49m[43mn_optimization_rounds[49m[43m,[49m[43m [49m[43mnfolds[49m[43m,[49m[43m [49m[43mn_boost_rounds[49m[43m,[49m[43m [49m[43mresults_folder[49m[43m,[49m[43m [49m
[32m     18[39m [43m    [49m[43mloss[49m[43m=[49m[43mloss[49m[43m,[49m
[32m     19[39m [43m[49m[43m)[49m
[32m     20[39m [38;5;66;03m# store the test set predictions and actuals[39;00m
[32m     21[39m results[set_name] = {
[32m     22[39m     [33m'[39m[33mall_results[39m[33m'[39m: result_df,
[32m     23[39m     [33m'[39m[33mconvergence[39m[33m'[39m: all_convergence_df,
[32m     24[39m     [33m'[39m[33moos_predictions[39m[33m'[39m: all_predictions_df,
[32m     25[39m } 

[36mFile [39m[32m~/code/distribution_estimation/docs/notebooks/xgb_functions.py:90[39m, in [36mrun_xgb_CV_trials[39m[34m(set_name, features, target, input_data, n_optimization_rounds, nfolds, num_boost_rounds, results_folder, loss, random_seed)[39m
[32m     87[39m Y_train, Y_test = Y_input[train_idx], Y_input[test_idx]
[32m     88[39m test_ids = input_data.iloc[test_idx][[33m'[39m[33mofficial_id[39m[33m'[39m].values
[32m---> [39m[32m90[39m preds, train_perf, test_perf, eval_key = [43m_train_single_fold[49m[43m([49m
[32m     91[39m [43m    [49m[43mX_train[49m[43m,[49m[43m [49m[43mX_test[49m[43m,[49m[43m [49m[43mY_train[49m[43m,[49m[43m [49m[43mY_test[49m[43m,[49m[43m [49m[43mparams[49m[43m.[49m[43mcopy[49m[43m([49m[43m)[49m[43m,[49m[43m [49m[43mloss[49m[43m,[49m[43m [49m[43mnum_boost_rounds[49m[43m,[49m
[32m     92[39m [43m[49m[43m)[49m
[32m     94[39m best_test_round = np.argmin(test_perf)
[32m     95[39m fold_perfs.append(test_perf[best_test_round])

[36mFile [39m[32m~/code/distribution_estimation/docs/notebooks/xgb_functions.py:29[39m, in [36m_train_single_fold[39m[34m(X_train, X_test, Y_train, Y_test, params, loss, num_boost_rounds)[39m
[32m     27[39m     dtest = xgb.QuantileDMatrix(X_test, label=Y_test)
[32m     28[39m [38;5;28;01melse[39;00m:
[32m---> [39m[32m29[39m     dtrain = [43mxgb[49m[43m.[49m[43mDMatrix[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43mlabel[49m[43m=[49m[43mY_train[49m[43m)[49m
[32m     30[39m     dtest = xgb.DMatrix(X_test, label=Y_test)
[32m     32[39m evals_result = {}

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/core.py:729[39m, in [36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f[39m[34m(*args, **kwargs)[39m
[32m    727[39m [38;5;28;01mfor[39;00m k, arg [38;5;129;01min[39;00m [38;5;28mzip[39m(sig.parameters, args):
[32m    728[39m     kwargs[k] = arg
[32m--> [39m[32m729[39m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/core.py:897[39m, in [36mDMatrix.__init__[39m[34m(self, data, label, weight, base_margin, missing, silent, feature_names, feature_types, nthread, group, qid, label_lower_bound, label_upper_bound, feature_weights, enable_categorical, data_split_mode)[39m
[32m    894[39m [38;5;28;01massert[39;00m handle [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m    895[39m [38;5;28mself[39m.handle = handle
[32m--> [39m[32m897[39m [38;5;28;43mself[39;49m[43m.[49m[43mset_info[49m[43m([49m
[32m    898[39m [43m    [49m[43mlabel[49m[43m=[49m[43mlabel[49m[43m,[49m
[32m    899[39m [43m    [49m[43mweight[49m[43m=[49m[43mweight[49m[43m,[49m
[32m    900[39m [43m    [49m[43mbase_margin[49m[43m=[49m[43mbase_margin[49m[43m,[49m
[32m    901[39m [43m    [49m[43mgroup[49m[43m=[49m[43mgroup[49m[43m,[49m
[32m    902[39m [43m    [49m[43mqid[49m[43m=[49m[43mqid[49m[43m,[49m
[32m    903[39m [43m    [49m[43mlabel_lower_bound[49m[43m=[49m[43mlabel_lower_bound[49m[43m,[49m
[32m    904[39m [43m    [49m[43mlabel_upper_bound[49m[43m=[49m[43mlabel_upper_bound[49m[43m,[49m
[32m    905[39m [43m    [49m[43mfeature_weights[49m[43m=[49m[43mfeature_weights[49m[43m,[49m
[32m    906[39m [43m[49m[43m)[49m
[32m    908[39m [38;5;28;01mif[39;00m feature_names [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    909[39m     [38;5;28mself[39m.feature_names = feature_names

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/core.py:729[39m, in [36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f[39m[34m(*args, **kwargs)[39m
[32m    727[39m [38;5;28;01mfor[39;00m k, arg [38;5;129;01min[39;00m [38;5;28mzip[39m(sig.parameters, args):
[32m    728[39m     kwargs[k] = arg
[32m--> [39m[32m729[39m [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/core.py:961[39m, in [36mDMatrix.set_info[39m[34m(self, label, weight, base_margin, group, qid, label_lower_bound, label_upper_bound, feature_names, feature_types, feature_weights)[39m
[32m    958[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01m.[39;00m[34;01mdata[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m dispatch_meta_backend
[32m    960[39m [38;5;28;01mif[39;00m label [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m961[39m     [38;5;28;43mself[39;49m[43m.[49m[43mset_label[49m[43m([49m[43mlabel[49m[43m)[49m
[32m    962[39m [38;5;28;01mif[39;00m weight [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    963[39m     [38;5;28mself[39m.set_weight(weight)

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/core.py:1099[39m, in [36mDMatrix.set_label[39m[34m(self, label)[39m
[32m   1090[39m [38;5;250m[39m[33;03m"""Set label of dmatrix[39;00m
[32m   1091[39m 
[32m   1092[39m [33;03mParameters[39;00m
[32m   (...)[39m[32m   1095[39m [33;03m    The label information to be set into DMatrix[39;00m
[32m   1096[39m [33;03m"""[39;00m
[32m   1097[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01m.[39;00m[34;01mdata[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m dispatch_meta_backend
[32m-> [39m[32m1099[39m [43mdispatch_meta_backend[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mlabel[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mlabel[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mfloat[39;49m[33;43m"[39;49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/data.py:1586[39m, in [36mdispatch_meta_backend[39m[34m(matrix, data, name, dtype)[39m
[32m   1584[39m     [38;5;28;01mreturn[39;00m
[32m   1585[39m [38;5;28;01mif[39;00m _is_np_array_like(data):
[32m-> [39m[32m1586[39m     [43m_meta_from_numpy[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mname[49m[43m,[49m[43m [49m[43mdtype[49m[43m,[49m[43m [49m[43mhandle[49m[43m)[49m
[32m   1587[39m     [38;5;28;01mreturn[39;00m
[32m   1588[39m [38;5;28;01mif[39;00m _is_arrow(data):

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/data.py:1533[39m, in [36m_meta_from_numpy[39m[34m(data, field, dtype, handle)[39m
[32m   1531[39m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([33m"[39m[33mMasked array is not supported.[39m[33m"[39m)
[32m   1532[39m interface_str = array_interface(data)
[32m-> [39m[32m1533[39m [43m_check_call[49m[43m([49m[43m_LIB[49m[43m.[49m[43mXGDMatrixSetInfoFromInterface[49m[43m([49m[43mhandle[49m[43m,[49m[43m [49m[43mc_str[49m[43m([49m[43mfield[49m[43m)[49m[43m,[49m[43m [49m[43minterface_str[49m[43m)[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/xgboost/core.py:310[39m, in [36m_check_call[39m[34m(ret)[39m
[32m    299[39m [38;5;250m[39m[33;03m"""Check the return value of C API call[39;00m
[32m    300[39m 
[32m    301[39m [33;03mThis function will raise exception when error occurs.[39;00m
[32m   (...)[39m[32m    307[39m [33;03m    return value from API calls[39;00m
[32m    308[39m [33;03m"""[39;00m
[32m    309[39m [38;5;28;01mif[39;00m ret != [32m0[39m:
[32m--> [39m[32m310[39m     [38;5;28;01mraise[39;00m XGBoostError(py_str(_LIB.XGBGetLastError()))

[31mXGBoostError[39m: [11:31:45] /workspace/src/data/array_interface.cu:44: Check failed: err == cudaGetLastError() (0 vs. 2) : 
Stack trace:
  [bt] (0) /home/danbot/code/data_analysis/lib/python3.12/site-packages/xgboost/lib/libxgboost.so(+0x2a6ecc) [0x7b1ddeca6ecc]
  [bt] (1) /home/danbot/code/data_analysis/lib/python3.12/site-packages/xgboost/lib/libxgboost.so(+0xb862dc) [0x7b1ddf5862dc]
  [bt] (2) /home/danbot/code/data_analysis/lib/python3.12/site-packages/xgboost/lib/libxgboost.so(+0x565ece) [0x7b1ddef65ece]
  [bt] (3) /home/danbot/code/data_analysis/lib/python3.12/site-packages/xgboost/lib/libxgboost.so(XGDMatrixSetInfoFromInterface+0x10b) [0x7b1ddebb3e5b]
  [bt] (4) /lib/x86_64-linux-gnu/libffi.so.8(+0x7b16) [0x7b1e8b2d2b16]
  [bt] (5) /lib/x86_64-linux-gnu/libffi.so.8(+0x43ef) [0x7b1e8b2cf3ef]
  [bt] (6) /lib/x86_64-linux-gnu/libffi.so.8(ffi_call+0x12e) [0x7b1e8b2d20be]
  [bt] (7) /usr/lib/python3.12/lib-dynload/_ctypes.cpython-312-x86_64-linux-gnu.so(+0xe11c) [0x7b1e8d4c111c]
  [bt] (8) /usr/lib/python3.12/lib-dynload/_ctypes.cpython-312-x86_64-linux-gnu.so(+0x92af) [0x7b1e8d4bc2af]



