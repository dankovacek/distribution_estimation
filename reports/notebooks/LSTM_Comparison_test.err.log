Traceback (most recent call last):
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/danbot/code/data_analysis/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# retrieve LSTM ensemble predictions
# filter for the common stations
common_stations = list(set(station_ids) & set(lstm_result_stns))
print(f'There are {len(common_stations)} monitored basins with LSTM ensemble results.')
attr_df = attr_df[attr_df['official_id'].isin(common_stations)]

output_folder = BASE_DIR / 'data' / 'results' /  'lstm_plots'
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

# plots = []
process_fdcs = True
if process_fdcs:
    for stn in common_stations:
        og_df = get_original_timeseries(stn, ds)
        # print(og_df[og_df.index >= '1982-06-01'].head())
        lstm_ensemble_df = filter_by_complete_years(stn, lstm_result_base_folder)

        if lstm_ensemble_df.empty:
            print(f'No complete years found for {stn}. Skipping.')
            continue
        og_df = og_df[og_df.index.isin(lstm_ensemble_df.index)]
        mdf, pmf_dfs = process_FDCs(lstm_ensemble_df, stn, og_df, output_folder)

        dates = list(pmf_dfs.keys())
        pdf_plots, fdc_plots, metric_tables = [], [], []
        ts_plot = plot_runoff_timeseries(stn, lstm_ensemble_df, dates[-1])
        for date in dates:
            metric_table = format_metrics_table(mdf, stn, date)
            metric_tables.append(metric_table)
            pdf_plot = plot_observed_and_simulated_pdf(stn, pmf_dfs, og_df, date, pdf_plots=pdf_plots)
            pdf_plots.append(pdf_plot)
            fdc_plot = plot_observed_and_simulated_fdc(stn, lstm_ensemble_df, og_df, date, fdc_plots=fdc_plots)
            fdc_plots.append(fdc_plot)

        layout = column(
            row([ts_plot, fdc_plots[1]]), 
            row(pdf_plots[0], metric_tables[0]), 
            row(pdf_plots[1], metric_tables[1]), 
            )
        # save the plot to an HTML file
        # show(layout)
        output_fname = output_folder / f'{stn}_fdc.html'
        output_file(output_fname, title=f'{stn} FDCs')
        save(layout)
        print(f'    Saved plot for {stn} to {output_fname}')
------------------

----- stdout -----
There are 723 monitored basins with LSTM ensemble results.
----- stdout -----
    Found 74 complete years for 12358500: [1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]
----- stderr -----
2025-07-04 12:04:41.432832: W external/xla/xla/service/platform_util.cc:220] unable to create StreamExecutor for CUDA:0: : CUDA_ERROR_OUT_OF_MEMORY: out of memory
------------------

[31m---------------------------------------------------------------------------[39m
[31mXlaRuntimeError[39m                           Traceback (most recent call last)
    [31m[... skipping hidden 1 frame][39m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/xla_bridge.py:828[39m, in [36m_init_backend[39m[34m(platform)[39m
[32m    827[39m logger.debug([33m"[39m[33mInitializing backend [39m[33m'[39m[38;5;132;01m%s[39;00m[33m'[39m[33m"[39m, platform)
[32m--> [39m[32m828[39m backend = [43mregistration[49m[43m.[49m[43mfactory[49m[43m([49m[43m)[49m
[32m    829[39m [38;5;66;03m# TODO(skye): consider raising more descriptive errors directly from backend[39;00m
[32m    830[39m [38;5;66;03m# factories instead of returning None.[39;00m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/xla_bridge.py:518[39m, in [36mregister_plugin.<locals>.factory[39m[34m()[39m
[32m    517[39m [38;5;28;01mif[39;00m distributed.global_state.client [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m--> [39m[32m518[39m   [38;5;28;01mreturn[39;00m [43mxla_client[49m[43m.[49m[43mmake_c_api_client[49m[43m([49m[43mplugin_name[49m[43m,[49m[43m [49m[43mupdated_options[49m[43m,[49m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m)[49m
[32m    520[39m distribute_options = {
[32m    521[39m     [33m'[39m[33mnode_id[39m[33m'[39m: distributed.global_state.process_id,
[32m    522[39m     [33m'[39m[33mnum_nodes[39m[33m'[39m: distributed.global_state.num_processes,
[32m    523[39m }

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jaxlib/xla_client.py:153[39m, in [36mmake_c_api_client[39m[34m(plugin_name, options, distributed_client)[39m
[32m    152[39m   options = {}
[32m--> [39m[32m153[39m [38;5;28;01mreturn[39;00m [43m_xla[49m[43m.[49m[43mget_c_api_client[49m[43m([49m[43mplugin_name[49m[43m,[49m[43m [49m[43moptions[49m[43m,[49m[43m [49m[43mdistributed_client[49m[43m)[49m

[31mXlaRuntimeError[39m: INTERNAL: no supported devices found for platform CUDA

During handling of the above exception, another exception occurred:

[31mRuntimeError[39m                              Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[16][39m[32m, line 23[39m
[32m     21[39m     [38;5;28;01mcontinue[39;00m
[32m     22[39m og_df = og_df[og_df.index.isin(lstm_ensemble_df.index)]
[32m---> [39m[32m23[39m mdf, pmf_dfs = [43mprocess_FDCs[49m[43m([49m[43mlstm_ensemble_df[49m[43m,[49m[43m [49m[43mstn[49m[43m,[49m[43m [49m[43mog_df[49m[43m,[49m[43m [49m[43moutput_folder[49m[43m)[49m
[32m     25[39m dates = [38;5;28mlist[39m(pmf_dfs.keys())
[32m     26[39m pdf_plots, fdc_plots, metric_tables = [], [], []

[36mCell[39m[36m [39m[32mIn[13][39m[32m, line 3[39m, in [36mprocess_FDCs[39m[34m(df, stn, og_df, output_folder)[39m
[32m      1[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mprocess_FDCs[39m(df, stn, og_df, output_folder):
[32m----> [39m[32m3[39m     kde = [43mKDEEstimator[49m[43m([49m[43mbaseline_log_grid[49m[43m,[49m[43m [49m[43mlog_dx[49m[43m)[49m
[32m      4[39m     [38;5;28mprint[39m([33mf[39m[33m'[39m[33m    Processing FDCs for [39m[38;5;132;01m{[39;00mstn[38;5;132;01m}[39;00m[33m'[39m)
[32m      5[39m     por_metrics = {}

[36mCell[39m[36m [39m[32mIn[10][39m[32m, line 91[39m, in [36mKDEEstimator.__init__[39m[34m(self, log_grid, dx, cache)[39m
[32m     90[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m__init__[39m([38;5;28mself[39m, log_grid, dx, cache=[38;5;28;01mNone[39;00m):
[32m---> [39m[32m91[39m     [38;5;28mself[39m.log_grid = [43mjnp[49m[43m.[49m[43masarray[49m[43m([49m[43mlog_grid[49m[43m,[49m[43m [49m[43mdtype[49m[43m=[49m[43mjnp[49m[43m.[49m[43mfloat32[49m[43m)[49m
[32m     92[39m     [38;5;28mself[39m.dx = jnp.asarray(dx, dtype=jnp.float32)

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/numpy/array.py:383[39m, in [36masarray[39m[34m(a, dtype, order, copy, device)[39m
[32m    381[39m [38;5;28;01mif[39;00m dtype [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[32m    382[39m   dtype = dtypes.canonicalize_dtype(dtype, allow_extended_dtype=[38;5;28;01mTrue[39;00m)  [38;5;66;03m# type: ignore[assignment][39;00m
[32m--> [39m[32m383[39m [38;5;28;01mreturn[39;00m [43marray[49m[43m([49m[43ma[49m[43m,[49m[43m [49m[43mdtype[49m[43m=[49m[43mdtype[49m[43m,[49m[43m [49m[43mcopy[49m[43m=[49m[38;5;28;43mbool[39;49m[43m([49m[43mcopy[49m[43m)[49m[43m,[49m[43m [49m[43morder[49m[43m=[49m[43morder[49m[43m,[49m[43m [49m[43mdevice[49m[43m=[49m[43mdevice[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/numpy/array.py:268[39m, in [36marray[39m[34m(object, dtype, copy, order, ndmin, device)[39m
[32m    266[39m [38;5;28;01melse[39;00m:
[32m    267[39m   [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([33mf[39m[33m"[39m[33mUnexpected input type for array: [39m[38;5;132;01m{[39;00m[38;5;28mtype[39m([38;5;28mobject[39m)[38;5;132;01m}[39;00m[33m"[39m)
[32m--> [39m[32m268[39m out_array: Array = [43mlax[49m[43m.[49m[43m_convert_element_type[49m[43m([49m
[32m    269[39m [43m    [49m[43mout[49m[43m,[49m[43m [49m[43mdtype[49m[43m,[49m[43m [49m[43mweak_type[49m[43m=[49m[43mweak_type[49m[43m,[49m[43m [49m[43msharding[49m[43m=[49m[43msharding[49m[43m)[49m
[32m    270[39m [38;5;28;01mif[39;00m ndmin > np.ndim(out_array):
[32m    271[39m   out_array = lax.expand_dims(out_array, [38;5;28mrange[39m(ndmin - np.ndim(out_array)))

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/lax/lax.py:1726[39m, in [36m_convert_element_type[39m[34m(operand, new_dtype, weak_type, sharding, warn_on_complex_to_real_cast)[39m
[32m   1724[39m   [38;5;28;01mreturn[39;00m operand
[32m   1725[39m [38;5;28;01melse[39;00m:
[32m-> [39m[32m1726[39m   [38;5;28;01mreturn[39;00m [43mconvert_element_type_p[49m[43m.[49m[43mbind[49m[43m([49m
[32m   1727[39m [43m      [49m[43moperand[49m[43m,[49m[43m [49m[43mnew_dtype[49m[43m=[49m[43mnew_dtype[49m[43m,[49m[43m [49m[43mweak_type[49m[43m=[49m[38;5;28;43mbool[39;49m[43m([49m[43mweak_type[49m[43m)[49m[43m,[49m
[32m   1728[39m [43m      [49m[43msharding[49m[43m=[49m[43msharding[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/core.py:536[39m, in [36mPrimitive.bind[39m[34m(self, *args, **params)[39m
[32m    534[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mbind[39m([38;5;28mself[39m, *args, **params):
[32m    535[39m   args = args [38;5;28;01mif[39;00m [38;5;28mself[39m.skip_canonicalization [38;5;28;01melse[39;00m [38;5;28mmap[39m(canonicalize_value, args)
[32m--> [39m[32m536[39m   [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43m_true_bind[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mparams[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/core.py:552[39m, in [36mPrimitive._true_bind[39m[34m(self, *args, **params)[39m
[32m    550[39m trace_ctx.set_trace(eval_trace)
[32m    551[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m552[39m   [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[43m.[49m[43mbind_with_trace[49m[43m([49m[43mprev_trace[49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mparams[49m[43m)[49m
[32m    553[39m [38;5;28;01mfinally[39;00m:
[32m    554[39m   trace_ctx.set_trace(prev_trace)

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/lax/lax.py:4902[39m, in [36m_convert_element_type_bind_with_trace[39m[34m(trace, args, params)[39m
[32m   4900[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m_convert_element_type_bind_with_trace[39m(trace, args, params):
[32m   4901[39m   sharding = params[[33m'[39m[33msharding[39m[33m'[39m]
[32m-> [39m[32m4902[39m   operand = [43mcore[49m[43m.[49m[43mPrimitive[49m[43m.[49m[43mbind_with_trace[49m[43m([49m[43mconvert_element_type_p[49m[43m,[49m[43m [49m[43mtrace[49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mparams[49m[43m)[49m
[32m   4903[39m   [38;5;28;01mif[39;00m sharding [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m sharding._is_concrete:
[32m   4904[39m     [38;5;28;01mwith[39;00m core.set_current_trace(trace):

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/core.py:562[39m, in [36mPrimitive.bind_with_trace[39m[34m(self, trace, args, params)[39m
[32m    559[39m   [38;5;28;01mwith[39;00m set_current_trace(trace):
[32m    560[39m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m.to_lojax(*args, **params)  [38;5;66;03m# type: ignore[39;00m
[32m--> [39m[32m562[39m [38;5;28;01mreturn[39;00m [43mtrace[49m[43m.[49m[43mprocess_primitive[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mparams[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/core.py:1066[39m, in [36mEvalTrace.process_primitive[39m[34m(self, primitive, args, params)[39m
[32m   1064[39m args = [38;5;28mmap[39m(full_lower, args)
[32m   1065[39m check_eval_args(args)
[32m-> [39m[32m1066[39m [38;5;28;01mreturn[39;00m [43mprimitive[49m[43m.[49m[43mimpl[49m[43m([49m[43m*[49m[43margs[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mparams[49m[43m)[49m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/dispatch.py:91[39m, in [36mapply_primitive[39m[34m(prim, *args, **params)[39m
[32m     89[39m prev = lib.jax_jit.swap_thread_local_state_disable_jit([38;5;28;01mFalse[39;00m)
[32m     90[39m [38;5;28;01mtry[39;00m:
[32m---> [39m[32m91[39m   outs = [43mfun[49m[43m([49m[43m*[49m[43margs[49m[43m)[49m
[32m     92[39m [38;5;28;01mfinally[39;00m:
[32m     93[39m   lib.jax_jit.swap_thread_local_state_disable_jit(prev)

    [31m[... skipping hidden 14 frame][39m

[36mFile [39m[32m~/code/data_analysis/lib/python3.12/site-packages/jax/_src/xla_bridge.py:758[39m, in [36mbackends[39m[34m()[39m
[32m    756[39m       [38;5;28;01melse[39;00m:
[32m    757[39m         err_msg += [33m"[39m[33m (you may need to uninstall the failing plugin package, or set JAX_PLATFORMS=cpu to skip this backend.)[39m[33m"[39m
[32m--> [39m[32m758[39m       [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m(err_msg)
[32m    760[39m [38;5;28;01massert[39;00m _default_backend [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m
[32m    761[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m config.jax_platforms.value:

[31mRuntimeError[39m: Unable to initialize backend 'cuda': INTERNAL: no supported devices found for platform CUDA (you may need to uninstall the failing plugin package, or set JAX_PLATFORMS=cpu to skip this backend.)

